#     style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
#     x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
#   registered = formatter("span",
#     style = x ~ style(color = ifelse(x, "green", "red")),
#     x ~ icontext(ifelse(x, "leaf", "alarm"), ifelse(x, "ok", "No")))
))
formattable(houseData, list(
#   price = formatter("span",
#     style = x ~ style(color = "white", background = "green",
#       padding.right = sprintf("%.0fpx", 4 + 76 * normalize(x)),
#       padding.left = "4px",
#       border.radius = "4px"))
price = formatter("span",
style = x ~ style(color = "white", background = "green",
padding.left = sprintf("%.0fpx", 4 + 76 * normalize(x)),
padding.right = "4px",
border.radius = "4px"))
# ,
#   grade = formatter("span",
#     style = x ~ ifelse(x == "A", style(color = "green", font.weight = "bold"), NA)),
#   test1_score = color_bar("pink", 0.2),
#   test2_score = color_bar("pink", 0.2),
#   final_score = formatter("span",
#     style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
#     x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
#   registered = formatter("span",
#     style = x ~ style(color = ifelse(x, "green", "red")),
#     x ~ icontext(ifelse(x, "leaf", "alarm"), ifelse(x, "ok", "No")))
))
formattable(houseData, list(
numbeds = formatter("span",
style = x ~ style(color = "white", background = "green",
padding.right = sprintf("%.0fpx", 4 + 76 * normalize(x)),
padding.left = "4px",
border.radius = "4px"))
price = formatter("span",
style = x ~ style(color = "white", background = "green",
padding.left = sprintf("%.0fpx", 4 + 76 * normalize(x)),
padding.right = "4px",
border.radius = "4px"))
# ,
#   grade = formatter("span",
#     style = x ~ ifelse(x == "A", style(color = "green", font.weight = "bold"), NA)),
#   test1_score = color_bar("pink", 0.2),
#   test2_score = color_bar("pink", 0.2),
#   final_score = formatter("span",
#     style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
#     x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
#   registered = formatter("span",
#     style = x ~ style(color = ifelse(x, "green", "red")),
#     x ~ icontext(ifelse(x, "leaf", "alarm"), ifelse(x, "ok", "No")))
))
formattable(houseData, list(
numbeds = formatter("span",
style = x ~ style(color = "white", background = "green",
padding.right = sprintf("%.0fpx", 4 + 76 * normalize(x)),
padding.left = "4px",
border.radius = "4px")),
price = formatter("span",
style = x ~ style(color = "white", background = "green",
padding.left = sprintf("%.0fpx", 4 + 76 * normalize(x)),
padding.right = "4px",
border.radius = "4px"))
# ,
#   grade = formatter("span",
#     style = x ~ ifelse(x == "A", style(color = "green", font.weight = "bold"), NA)),
#   test1_score = color_bar("pink", 0.2),
#   test2_score = color_bar("pink", 0.2),
#   final_score = formatter("span",
#     style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
#     x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
#   registered = formatter("span",
#     style = x ~ style(color = ifelse(x, "green", "red")),
#     x ~ icontext(ifelse(x, "leaf", "alarm"), ifelse(x, "ok", "No")))
))
formattable(df, list(
# bootstrap glyphicons
grade = formatter("span",
style = x ~ style(color = vmap(x, A="darkgreen",B="orange",C="darkred")),
x ~ icontext(vmap(x, A="star",B="ok",C="remove"), x)),
# bar
test1_score = formatter("span",
style = x ~ style(color = "white", background = "green",
padding.left = sprintf("%.0fpx", 4 + 76 * normalize(x)),
padding.right = "4px",
border.radius = "4px")),
# bar
test2_score = formatter("span",
style = x ~ style(color = "white", background = "green",
padding.right = sprintf("%.0fpx", 4 + 76 * normalize(x)),
padding.left = "4px",
border.radius = "4px")),
# gradient
final_score = formatter("span",
style = x ~ style(display = "block",
background = rgb(0.3, 0, 1 - 0.8 * qrank(x)),
color = "white", padding.right = "5px", border.radius = "4px")),
# text transform
registered = x ~ ifelse(x, "yes", "no")),
align = c("r","l","r","c","r","l","r","c"))
formattable(houseData, list(
numbeds = formatter("span",
style = x ~ style(color = "white", background = "green",
padding.right = sprintf("%.0fpx", 4 + 76 * normalize(x)),
padding.left = "4px",
border.radius = "4px")),
price = formatter("span",
style = x ~ style(color = "white", background = "green",
padding.left = sprintf("%.0fpx", 4 + 76 * normalize(x)),
padding.right = "4px",
border.radius = "4px"))
# ,
#   grade = formatter("span",
#     style = x ~ ifelse(x == "A", style(color = "green", font.weight = "bold"), NA)),
#   test1_score = color_bar("pink", 0.2),
#   test2_score = color_bar("pink", 0.2),
#   final_score = formatter("span",
#     style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
#     x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
#   registered = formatter("span",
#     style = x ~ style(color = ifelse(x, "green", "red")),
#     x ~ icontext(ifelse(x, "leaf", "alarm"), ifelse(x, "ok", "No")))
), align = c("l","l","l","r","l","l","l","l","l"))
formattable(houseData, list(
numbeds = formatter("span",
style = x ~ style(color = "white", background = "green",
padding.right = sprintf("%.0fpx", 4 + 76 * normalize(x)),
padding.left = "4px",
border.radius = "4px")),
price = formatter("span",
style = x ~ style(color = "white", background = "green",
padding.left = sprintf("%.0fpx", 4 + 76 * normalize(x)),
padding.right = "4px",
border.radius = "4px"))
# ,
#   grade = formatter("span",
#     style = x ~ ifelse(x == "A", style(color = "green", font.weight = "bold"), NA)),
#   test1_score = color_bar("pink", 0.2),
#   test2_score = color_bar("pink", 0.2),
#   final_score = formatter("span",
#     style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
#     x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
#   registered = formatter("span",
#     style = x ~ style(color = ifelse(x, "green", "red")),
#     x ~ icontext(ifelse(x, "leaf", "alarm"), ifelse(x, "ok", "No")))
), align = c("l","r","l","l","l","l","l","l","l"))
formattable(houseData, list(
numbeds = formatter("span",
style = x ~ style(color = "white", background = "green",
padding.right = sprintf("%.0fpx", 4 + 76 * normalize(x)),
padding.left = "4px",
border.radius = "4px")),
price = formatter("span",
style = x ~ style(color = "white", background = "green",
padding.right = sprintf("%.0fpx", 4 + 76 * normalize(x)),
padding.left = "4px",
border.radius = "4px"))
# ,
#   grade = formatter("span",
#     style = x ~ ifelse(x == "A", style(color = "green", font.weight = "bold"), NA)),
#   test1_score = color_bar("pink", 0.2),
#   test2_score = color_bar("pink", 0.2),
#   final_score = formatter("span",
#     style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
#     x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
#   registered = formatter("span",
#     style = x ~ style(color = ifelse(x, "green", "red")),
#     x ~ icontext(ifelse(x, "leaf", "alarm"), ifelse(x, "ok", "No")))
), align = c("l","l","l","l","l","l","l","l","l"))
formattable(houseData, list(
housesqft = formatter("span",
style = x ~ style(color = "white", background = "green",
padding.right = sprintf("%.0fpx", 4 + 76 * normalize(x)),
padding.left = "4px",
border.radius = "4px")),
price = formatter("span",
style = x ~ style(color = "white", background = "green",
padding.right = sprintf("%.0fpx", 4 + 76 * normalize(x)),
padding.left = "4px",
border.radius = "4px"))
# ,
#   grade = formatter("span",
#     style = x ~ ifelse(x == "A", style(color = "green", font.weight = "bold"), NA)),
#   test1_score = color_bar("pink", 0.2),
#   test2_score = color_bar("pink", 0.2),
#   final_score = formatter("span",
#     style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
#     x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
#   registered = formatter("span",
#     style = x ~ style(color = ifelse(x, "green", "red")),
#     x ~ icontext(ifelse(x, "leaf", "alarm"), ifelse(x, "ok", "No")))
), align = c("l","l","l","l","l","l","l","l","l"))
library(knitr)
knit('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/readme.Rmd')
?knit
knit('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/readme.Rmd')
knit('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/readme.Rmd')
setwd("/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/")
knit('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/readme.Rmd')
knit('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/readme.Rmd')
install.packages("pls")
# here the search is filtered to just homes for sale
# if there are less filters in search, the code will need to be modified since the css might be different
# for different types of results (eg. homes for sales vs new homes vs homes for rent)
url="http://www.zillow.com/homes/for_sale/Greenwood-IN/fsba,fsbo,fore,cmsn_lt/house_type/52333_rid/39.638414,-86.011362,39.550714,-86.179419_rect/12_zm/0_mmm/"
# get list of houses for sales that appears on the page
houselist <- url%>%html()%>%html_nodes("article")
# Extract zillow id for each listing
zpid <- houselist %>% html_attr("id") %>% str_replace_all("zpid_", "")
# get the address for each listing
staddrlink <- houselist%>%html_node(".property-address a")%>%html_attr("href")
straddr <- sapply(strsplit(staddrlink,"/"),function(x) x[3])
straddr <- str_replace_all(straddr, "-", " ")
lat_lon <- geocode(straddr, source = "google")
lotsqft <- houselist %>% html_node(".lot-size") %>% html_text() %>% str_replace_all(",", "")
lotsqft <- sapply(lotsqft, function(x) {
num <- as.numeric(str_extract_all(x, "(\\d*\\.)?\\d+"))
if (!is.na(num) & str_detect(x, "(ac|acre)")) {
num <- num * 43560
}
num
}
)
yrbuilt <- houselist%>%html_node(".built-year")%>%html_text()
yrbuilt <- as.numeric(str_extract_all(yrbuilt, "\\d+"))
price <- houselist%>%html_node(".price-large")%>%html_text()%>%gsub("[\\$a-zA-Z,]","",.)%>%as.numeric()
# house parameters (number of beds, baths, house area)
houseparams <- houselist%>%html_node(".property-data")%>%html_text()
houseparamsSplit <- strsplit(houseparams,", ")
## get number of beds
numbeds <- sapply(houseparamsSplit,function(x) as.numeric(strsplit(x[1]," ")[[1]][1]))
## get number of baths
numbaths <- sapply(houseparamsSplit,function(x) as.numeric(strsplit(x[1]," ")[[1]][4]))
housesqft <- sapply(houseparamsSplit,function(x) strsplit(x[1]," ")[[1]][7]) %>%
str_replace_all(",", "") %>% as.numeric()
#houseData <- data.frame(zpid,price,yrbuilt,numbeds,numbaths,housesqft,lotsqft,straddr)
houseData <- data.frame(zpid,price,yrbuilt,numbeds,numbaths,housesqft,lotsqft,straddr,lat_lon)
formattable(houseData, list(
housesqft = formatter("span",
style = x ~ style(color = "white", background = "green",
padding.right = sprintf("%.0fpx", 4 + 76 * normalize(x)),
padding.left = "4px",
border.radius = "4px")),
price = formatter("span",
style = x ~ style(color = "white", background = "green",
padding.right = sprintf("%.0fpx", 4 + 76 * normalize(x)),
padding.left = "4px",
border.radius = "4px"))
# ,
#   grade = formatter("span",
#     style = x ~ ifelse(x == "A", style(color = "green", font.weight = "bold"), NA)),
#   test1_score = color_bar("pink", 0.2),
#   test2_score = color_bar("pink", 0.2),
#   final_score = formatter("span",
#     style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
#     x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
#   registered = formatter("span",
#     style = x ~ style(color = ifelse(x, "green", "red")),
#     x ~ icontext(ifelse(x, "leaf", "alarm"), ifelse(x, "ok", "No")))
), align = c("l","l","l","l","l","l","l","l","l"))
knit('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/readme.Rmd')
install.packages("lars")
knit('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/readme.Rmd')
knit('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/readme.Rmd')
library(knitr)
opts_chunk$set(tidy = TRUE, cache=TRUE, autodep=TRUE, message=FALSE)
library(DAAG)
library(ggplot2)
library(tidyr)
library(GGally)
library(gplots)
data(ais)
heatmap.2(as.matrix(ais[1:11]))
ggpairs(ais[,1:11])
ggpairs(ais)
ggparcoord(ais, columns = 1:11, groupColumn = "sex") +
scale_colour_manual(values = c("grey", "red"))
ggplot(data = ais_long, aes(value)) + geom_histogram() +
facet_wrap( ~ measure, scales = "free")
ais_long <- gather(ais, key = measure, value = value, rcc:wt)
levels(ais_long$measure) <- c("red blood cell count", "while blood cell count",
"hematocrit", "hemaglobin concentration",
"plasma ferritins", "Body mass index",
"sum of skin folds", "percent Body fat",
"lean body mass", "height",
"weight")
ggplot(data = ais_long, aes(value)) + geom_histogram() +
facet_wrap( ~ measure, scales = "free")
ggplot(data = ais_long, aes(value, fill = sex)) + geom_histogram() + geom_density(alpha = 0.2) +
facet_wrap( ~ measure, scales = "free")
ggplot(data = ais_long, aes(value, fill = sex)) + geom_density(alpha = 0.2) +
facet_wrap( ~ measure, scales = "free")
ggplot(data = ais_long, aes(value, fill = sport)) + geom_density(alpha = 0.2) +
facet_wrap( ~ measure, scales = "free")
ggplot(data = ais_long, aes(value, fill = sex)) + geom_density(alpha = 0.2) +
facet_wrap( ~ measure, scales = "free")
ggplot(data = ais_long, aes(value, fill = sex)) + geom_density(alpha = 0.2) +
facet_grid(sport ~ measure, scales = "free")
ggplot(data = ais_long, aes(value, fill = sex)) + geom_density(alpha = 0.2) +
facet_grid(measure ~ sport, scales = "free")
ggplot(data = ais_long, aes(value, fill = sex)) + geom_density(alpha = 0.2) +
facet_wrap( ~ measure, scales = "free")
ggparcoord(ais, columns = 1:11, groupColumn = "sex") +
scale_colour_manual(values = c("grey", "red"))
ggplot(data = ais_long, aes(value, fill = sex)) + geom_density(alpha = 0.2) +
facet_wrap( ~ measure, scales = "free")
ggparcoord(ais, columns = 1:11, groupColumn = "sex") +
scale_colour_manual(values = c("grey", "red"))
setwd("/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/")
knit('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/readme.Rmd')
knit('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/readme.Rmd')
setwd("/Users/lei/Desktop/one/Practice/GIT_first/Projects/Visualization/")
knit('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Visualization/readme.rmd')
setwd("/Users/lei/Desktop/one/Practice/GIT_first/Projects/Predict musical ability with LASSO/")
knit('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Predict musical ability with LASSO/readme.Rmd')
setwd("/Users/lei/Desktop/one/Practice/GIT_first/Projects/Accelerate R with cpp/")
knit('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Accelerate R with cpp/readme.Rmd')
library("NFLvegas")
nfl_vegas(from = 2011, to = 2011, obs = 5)
##------ Fri Nov 13 11:53:30 2015 ------##
##------ Fri Nov 13 11:53:35 2015 ------##
nfl_vegas <- function(from = 2011, to = 2011, obs = "all"){
library(stringr);library(rvest)
timestamp()
outurl <- character(0)
for (year in from:to ) {
nfl_season <- html(paste0("http://www.pro-football-reference.com/years/",year,"/games.htm"))
test1 <- nfl_season %>%
html_nodes("#games a") %>%
#use CSS selector '#games a' to select all tags including links in the table on the website
html_attr("href")
#to extract the value of attribute "href", which contains the links we need
test2 <- test1[substr(test1,2,4) == "box"]
#to select the link we need
test3 <- paste0("http://www.pro-football-reference.com",test2)
#create the new link we need
outurl <- c(outurl,test3)
}
row = length(outurl)
if (obs != "all") {
row = as.numeric(obs)
}
out <- matrix(nrow = row, ncol = 5)
for (i in 1:row ) {
nfltest <- read_html(outurl[i])
test <- nfltest %>%
html_nodes("#game_info td") %>%
html_text()
out[i,5] <- str_extract(test[match("Vegas Line",test)+1], "\\s-?\\d*\\.?\\d+\\b")
out[i,4] <- str_trim(str_replace(test[match("Vegas Line",test)+1], "\\s-?\\d*\\.?\\d+\\b", ""))
year <- as.numeric(substr(outurl[i],49,52))
out[i,1] <- year
out[i,3] <- substr(outurl[i],49,60)
out[i,2] <- ifelse(substr(outurl[i],53,54) %in% c("01", "02"), year-1, year)
}
outdata <- as.data.frame(out)
colnames(outdata) <- c("year","season", "gameid", "favorite", "spread")
timestamp()
outdata
}
nfl_vegas(from = 2011, to = 2011, obs = 5)
##------ Fri Nov 13 11:56:57 2015 ------##
##------ Fri Nov 13 11:57:03 2015 ------##
install_github('NFLvegas', 'mdhuilee')
library(devtools)
install_github('NFLvegas', 'mdhuilee')
rm(nfl_vegas)
library("NFLvegas")
nfl_vegas(from = 2011, to = 2011, obs = 5)
##------ Fri Nov 13 11:59:37 2015 ------##
##------ Fri Nov 13 11:59:43 2015 ------##
setwd("/Users/lei/Desktop/one/Practice/GIT_first/Projects/Package demo/")
knit('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Package demo/readme.rmd')
##------ Fri Nov 13 13:28:43 2015 ------##
##------ Fri Nov 13 13:28:49 2015 ------##
knit('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Package demo/readme.rmd')
knit('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Package demo/readme.rmd')
##------ Fri Nov 13 13:32:32 2015 ------##
##------ Fri Nov 13 13:32:37 2015 ------##
knit('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Package demo/readme.rmd')
knit('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Package demo/readme.rmd')
##------ Fri Nov 13 13:39:42 2015 ------##
##------ Fri Nov 13 13:39:47 2015 ------##
knit('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Package demo/readme.rmd')
knit('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Package demo/readme.rmd')
set.seed(1234)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
dataFrame <- data.frame(x, y)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
dataMatrix
dataFrame
sample(1:12)
t(dataMatrix)[, nrow(dataMatrix):1]
image(t(dataMatrix)[, nrow(dataMatrix):1])
?image
kmeansObj <- kmeans(dataMatrix, centers = 3)
kmeansObj
kmeansObj$cluster
order(kmeansObj$cluster)
dataMatrix
setwd("/Users/lei/Desktop/one/Practice/GIT_first/Projects/Predict musical ability with LASSO/")
knit('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Predict musical ability with LASSO/readme.Rmd')
knit('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Predict musical ability with LASSO/readme.Rmd')
library(pitchRx)
library(dplyr)
library(RSQLite)
library(DBI)
library(ggplot2)
db <- src_sqlite("pitchfx.sqlite3", create = T)
files <- c("inning/inning_all.xml", "players.xml")
scrape(start = "2013-06-01", end = Sys.Date(), suffix = files, connect = db$con)
setwd("/Users/lei/Desktop/one/Practice/GIT_first/Projects/Database with R/")
knit('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Database with R/readme.rmd')
cat("abc")
message("abc")
knit('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Database with R/readme.rmd')
ggplot(data=cs_out_zn_count,aes(x=count,y=cs_out_zn)) + geom_point(color = "blue", size = 2) + ylab("Probalilities by count") + theme_bw()
ggplot(data=cs_out_zn_count,aes(x=count,y=cs_out_zn)) + geom_point(color = "blue", size = 4) + ylab("Probalilities by count") + theme_bw()
kable(cs_out_zn_all)
names(cs_out_zn_all)
names(cs_out_zn_all) <- c("a","b","c")
names(cs_out_zn_all)
names(cs_out_zn_all)
kable(cs_out_zn_all)
kable(cs_out_zn_count)
names(cs_out_zn_all) <- c("# Called Strikes","# Pitches","Called strikes %")
cs_out_zn_all
names(dimnames(cs_out_zn_all))
names(dimnames(cs_out_zn_all))<- c("Academic Performance", "Nutritional Status")
cs_out_zn_all
names(dimnames(cs_out_zn_all))
dimnames(cs_out_zn_all)
dimnames(cs_out_zn_all)[1]
dimnames(cs_out_zn_all)[1][[1]]
dimnames(cs_out_zn_all)[1][[1]] <- "test"
cs_out_zn_all
kable(cs_out_zn_all)
?scrape
knit('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Database with R/readme.rmd')
knit('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Database with R/readme.rmd')
library(Rcpp)
library(RcppArmadillo)
library(inline)
log_like_code <- "
//to create a numericvector object yc based on y
Rcpp::NumericVector yc(y);
//to create a armadillo vector x_a based on x
arma :: vec x_a = Rcpp :: as < arma :: vec >( x );
//to create a armadillo vector beta_a based on beta
arma :: vec beta_a = Rcpp :: as < arma :: vec >( beta );
int n = x_a.n_elem; //to get the length of armadillo vectro x_a
arma::vec v(n);     //to create a armadillo vector v with length n
v.ones();           //to create a armadillo vector with elements one and length n
arma::mat X(n, 2);  //to create a amadillo matrix with n rows and 2 columns
X.col(0) = v;       //assign vector v to the first column of X
X.col(1) = x_a;     //assign vector x_a to the second column of X
double each = 0;
double sum = 0;
for (int i = 0; i < n; i++){
//to calculate each value in the sum of gradient function for each i
each = as_scalar(yc[i] * beta_a.t() * X.rows(i,i).t() -
log(1 + exp(beta_a.t() * X.rows(i,i).t())));
sum = sum + each;
}
return Rcpp::wrap(sum);
"
log_like_c <- cxxfunction(signature(beta = "numeric", x = "numeric",
y = "numeric"), body=log_like_code, plugin="RcppArmadillo")
library(Rcpp)
library(RcppArmadillo)
library(inline)
log_like_code <- "
//to create a numericvector object yc based on y
Rcpp::NumericVector yc(y);
//to create a armadillo vector x_a based on x
arma :: vec x_a = Rcpp :: as < arma :: vec >( x );
//to create a armadillo vector beta_a based on beta
arma :: vec beta_a = Rcpp :: as < arma :: vec >( beta );
int n = x_a.n_elem; //to get the length of armadillo vectro x_a
arma::vec v(n);     //to create a armadillo vector v with length n
v.ones();           //to create a armadillo vector with elements one and length n
arma::mat X(n, 2);  //to create a amadillo matrix with n rows and 2 columns
X.col(0) = v;       //assign vector v to the first column of X
X.col(1) = x_a;     //assign vector x_a to the second column of X
double each = 0;
double sum = 0;
for (int i = 0; i < n; i++){
//to calculate each value in the sum of gradient function for each i
each = as_scalar(yc[i] * beta_a.t() * X.rows(i,i).t() -
log(1 + exp(beta_a.t() * X.rows(i,i).t())));
sum = sum + each;
}
return Rcpp::wrap(sum);
"
log_like_c <- cxxfunction(signature(beta = "numeric", x = "numeric",
y = "numeric"), body=log_like_code, plugin="RcppArmadillo")
dyn.load("example.so")
library(Rcpp)
library(RcppArmadillo)
library(inline); library(Rcpp); library(RcppArmadillo)
remove.packages("Rcpp")
remove.packages("RcppArmadillo")
remove.packages("inline")
install.packages("Rcpp")
install.packages("RcppArmadillo")
install.packages("inline")
setwd("/Users/lei/Desktop/one/Practice/GIT_first/Projects/Visualization/")
knit('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Visualization/readme.rmd')
library(knitr)
knit('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Visualization/readme.rmd')
