out_zn %>%
summarize(sum = sum(cs_ind), n = n()) %>%
collect() %>%
mutate(cs_out_zn = sum / n)
cs_out_zn_all
cs_out_zn_count <-
out_zn %>%
group_by(count) %>%
summarize(sum = sum(cs_ind), n =n()) %>%
collect() %>%
mutate(cs_out_zn = sum / n)
cs_out_zn_count
atbat_dt <- dat[["atbat"]]
atbat_dt
atbat_dt <- dat[["atbat"]]
atbat_dt
atbat_dt <- tbl(db, "atbat")
atbat_dt
atbat <-
select(atbat_dt, gameday_link, num, stand, p_throws, inning, pitcher_name)
atbat
pitch_umpire <-
umpire_dt %>%
filter(position == "home") %>%
inner_join(pitch_dt, by ="gameday_link")
out_zn
cs_out_zn_all <-
out_zn %>%
summarize(sum = sum(cs_ind), n = n(), cs_out_zn = sum(cs_ind) / n())%>%
collect()
cs_out_zn_all
cs_out_zn_all <-
out_zn %>%
summarize(sum = sum(cs_ind), n = n(), cs_out_zn = sum / n %>%
collect()
cs_out_zn_all <-
out_zn %>%
summarize(sum = sum(cs_ind), n = n(), cs_out_zn = sum / n) %>%
collect()
cs_out_zn_all <-
out_zn %>%
summarize(sum = sum(cs_ind), n = n()) %>%
mutate(cs_out_zn = sum / n) %>%
collect()
cs_out_zn_all
a <- c(1,1)
A<- as.dataframe(a)
A<- as.data.frame(a)
a <- c(1,1)
A<- as.data.frame(a)
B<- as.data.frame(a)
A %>%
inner_join(B, by ="a")
pitch_atbat <-
out_zn %>%
inner_join(atbat, by = c("gameday_link", "num")) %>%
distinct()
pitch_atbat
dim(pitch_atbat)
(1:64)^2
(1:1000)^2
(1:10000)^2
(1:100000)^2
(1:1000000)^2
(1:1000000000)^2
(1:10000000)^2
(1:100000000)^2
getVignetteInfo()
library("tools", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
getVignetteInfo()
getVignetteInfo("grid")
remove(list=ls())
library(faraway)
lmod <- lm(lpsa ~ .,prostate)
prostate
lmod <- lm(lpsa ~ .,prostate)
summary(lmod)
lmod <- update(lmod, .~. -gleason)
summary(lmod)
lmod <- update(lmod, .~. -lcp)
summary(lmod)
lmod <- update(lmod, .~. -pgg45)
summary(lmod)
lmod <- update(lmod, .~. -age)
summary(lmod)
lmod <- update(lmod, .~. -lbph)
summary(lmod)
require(leaps)
b <- regsubsets(lpsa ~ ., data=prostate)
rs <- summary(b)
rs$which
n <-dim(prostate)[1]
AIC <- n*log(rs$rss/n) + 2*(2:9)
plot(AIC ~ I(1:8), ylab = 'AIC', xlab='Number of Predictiors')
#1(c)
plot(1:8, rs$adjr2, xlab = 'Number of Predictors', ylab = 'Adjusted R-square')
which.max(rs$adjr2)
?abline
plot(2:8, rs$cp, xlab = "No. of Parameters", ylab = "Cp Statistic")
rs$cp
plot(1:8, rs$cp, xlab = "No. of Parameters", ylab = "Cp Statistic")
abline(0,1)
summary(lmod)
lmod <- lm(lpsa ~ .,prostate)
summary(lmod)
lmod <- update(lmod, .~. -gleason)
summary(lmod)
lmod <- update(lmod, .~. -lcp)
summary(lmod)
lmod <- update(lmod, .~. -pgg45)
summary(lmod)
lmod <- update(lmod, .~. -age)
summary(lmod)
lmod <- update(lmod, .~. -lbph)
summary(lmod)
require(leaps)
b <- regsubsets(lpsa ~ ., data=prostate)
rs <- summary(b)
rs
plot(rs$size, rs$cp, xlab = "No. of Parameters", ylab = "Cp Statistic")
rs$size
full=lm(lpsa~., data=prostate)
step(full, data=prostate, direction="backward")
require(leaps)
b <- regsubsets(lpsa ~ ., data=prostate)
plot(b, scale="adjr2")
plot(b, scale="aic")
plot(b, scale="bic")
?plot
??plot
rs <- summary(b)
rs$which
n <-dim(prostate)[1]
AIC <- n*log(rs$rss/n) + 2*(2:9)
AIC
RS
rs
?regsubsets
plot(b, scale="adjr2")
plot(b, scale="Cp")
plot(b, scale="adjr2")
plot(1:8, rs$cp, xlab = "No. of Parameters", ylab = "Cp Statistic")
plot(b, scale="Cp")
plot(1:8, rs$adjr2, xlab = 'Number of Predictors', ylab = 'Adjusted R-square')
which.max(rs$adjr2)
which.min(rs$cp)
rs$cp
which.max(AIC)
AIC
which.min(AIC)
plot(b, scale="Cp")
which.min(rs$cp)
mse <- function(c){
var <- s2*((n+c)^2*n + k^2*n - 2*(n+c)*k^2)/((n+c)^2-k^2)^2
bias <- -1*beta1*c*(n+c)/((n+c)^2-k^2)
bias^2 + var
}
n <- 20; k <- 19; s2 <- 1; beta1 <- 0.5
mse(0)
mse(1)
mse(2)
mse(3)
mse(4)
mse(5)
mse(6)
?sweep
require(stats) # for median
med.att <- apply(attitude, 2, median)
sweep(data.matrix(attitude), 2, med.att)  # subtract the column medians
attitude
data.matrix(attitude)
as.matrix(attitude)
?data.matrix
DF <- data.frame(a = 1:3, b = letters[10:12],
c = seq(as.Date("2004-01-01"), by = "week", len = 3),
stringsAsFactors = TRUE)
DF
data.matrix(DF[1:2])
data.matrix(DF)
DF <- data.frame(a = 1:3, b = letters[c(3,3,4)],
c = seq(as.Date("2004-01-01"), by = "week", len = 3),
stringsAsFactors = TRUE)
DF <- data.frame(a = 1:3, b = letters[c(3,3,4)],
DF
data.matrix(DF)
med.att
sweep(data.matrix(attitude), 2, med.att)  # subtract the column medians
?sweep
DF <- data.frame(a = 1:3, b = letters[c(3,3,4)],
c = seq(as.Date("2004-01-01"), by = "week", len = 3),
stringsAsFactors = TRUE)
DF
str(DF$b)
as.matrix(DF)
data.matrix(DF)
?data.matrix
?sweep
shiny::runApp('~/Desktop/one/Practice/GIT_first/Projects/Shiny web app')
shiny::runApp('~/Desktop/one/Practice/GIT_first/Projects/Shiny web app')
shiny::runApp('~/Desktop/one/Practice/GIT_first/Projects/Shiny web app')
shiny::runApp('~/Desktop/one/Practice/GIT_first/Projects/Shiny web app')
shiny::runApp('~/Desktop/one/Practice/GIT_first/Projects/Shiny web app')
shiny::runApp('~/Desktop/one/Practice/GIT_first/Projects/Shiny web app')
shiny::runApp('~/Desktop/one/Practice/GIT_first/Projects/Shiny web app')
library(knitr)
setwd("/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/")
knit('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/readme.rmd')
houseData
?write.csv
write.csv(houseData, file = "/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/houseData.csv")
houseData <- read.csv(houseData,
file = "/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/houseData.csv")
houseData
?read.csv
houseData <- read.csv(houseData, stringsAsfactors = F,
file = "/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/houseData.csv")
houseData <- read.csv(houseData, stringsAsFactors = F,
file = "/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/houseData.csv")
View(houseData)
theme_set(theme_bw(16))
gw_in <- qmap("Greenwood IN", color = "bw", zoom = 12)
gw_in +
stat_bin2d(
aes(x = lon, y = lat, price_cat, fill = price_cat),
size = .5, bins = 25, alpha = 1/2,
data = houseData
) +
scale_fill_manual(
values = c("1" = "#c7e9c0","2" = "#74c476","3" = "#31a354",
"4" = "#006d2c"),
labels = c("<100,000", "100,000-200,000", "200,000-300,000", ">300,000")) +
theme(    axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.text = element_text(size=16))
gw_in <- qmap("Greenwood IN", color = "bw", zoom = 12)
gw_in +
stat_bin2d(
aes(x = lon, y = lat, fill = price_cat),
size = .5, bins = 25, alpha = 1/2,
data = houseData
) +
scale_fill_manual(
values = c("1" = "#c7e9c0","2" = "#74c476","3" = "#31a354",
"4" = "#006d2c"),
labels = c("<100,000", "100,000-200,000", "200,000-300,000", ">300,000")) +
theme(    axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.text = element_text(size=16))
names(houseData)
?radioButtons
table(houseData$numbeds)
shiny::runApp('Shiny web app')
houseData
houseData <- read.csv(houseData, stringsAsFactors = F,
file = "/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/houseData.csv")
# here the search is filtered to just homes for sale
# if there are less filters in search, the code will need to be modified since the css might be different
# for different types of results (eg. homes for sales vs new homes vs homes for rent)
url="http://www.zillow.com/homes/for_sale/Greenwood-IN/fsba,fsbo,fore,cmsn_lt/house_type/52333_rid/39.638414,-86.011362,39.550714,-86.179419_rect/12_zm/0_mmm/"
# get list of houses for sales that appears on the page
houselist <- url%>%read_html()%>%html_nodes("article")
# Extract zillow id for each listing
zpid <- houselist %>% html_attr("id") %>% str_replace_all("zpid_", "")
# get the address for each listing
staddrlink <- houselist%>%html_node(".property-address a")%>%html_attr("href")
straddr <- sapply(strsplit(staddrlink,"/"),function(x) x[3])
straddr <- str_replace_all(straddr, "-", " ")
lat_lon <- geocode(straddr, source = "google")
lotsqft <- houselist %>% html_node(".lot-size") %>% html_text() %>% str_replace_all(",", "")
lotsqft <- sapply(lotsqft, function(x) {
num <- as.numeric(str_extract_all(x, "(\\d*\\.)?\\d+"))
if (!is.na(num) & str_detect(x, "(ac|acre)")) {
num <- num * 43560
}
num
}
)
yrbuilt <- houselist%>%html_node(".built-year")%>%html_text()
yrbuilt <- as.numeric(str_extract_all(yrbuilt, "\\d+"))
price <- houselist%>%html_node(".price-large")%>%html_text()%>%gsub("[\\$a-zA-Z,]","",.)%>%as.numeric()
# house parameters (number of beds, baths, house area)
houseparams <- houselist%>%html_node(".property-data")%>%html_text()
houseparamsSplit <- strsplit(houseparams,", ")
## get number of beds
numbeds <- sapply(houseparamsSplit,function(x) as.numeric(strsplit(x[1]," ")[[1]][1]))
## get number of baths
numbaths <- sapply(houseparamsSplit,function(x) as.numeric(strsplit(x[1]," ")[[1]][4]))
housesqft <- sapply(houseparamsSplit,function(x) strsplit(x[1]," ")[[1]][7]) %>%
str_replace_all(",", "") %>% as.numeric()
#houseData <- data.frame(zpid,price,yrbuilt,numbeds,numbaths,housesqft,lotsqft,straddr)
houseData <- data.frame(zpid,price,yrbuilt,numbeds,numbaths,housesqft,lotsqft,straddr,lat_lon)
houseData
write.csv(houseData, file = "/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/houseData.csv")
house_date <- read.csv(houseData, stringsAsFactors = F,
file = "/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/houseData.csv")
write.csv(houseData, row.names = FALSE,
file = "/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/houseData.csv")
house_date <- read.csv(houseData, stringsAsFactors = F,
file = "/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/houseData.csv")
install.packages("readr")
library(readr)
house_date <- read_csv(houseData,
file = "/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/houseData.csv")
house_date <- read_csv(houseData, col_names = TRUE,
file = "/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/houseData.csv")
vignette("column-types")
?read_csv2
house_date <- read_csv(houseData, col_names = TRUE, col_types = NULL,
file = "/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/houseData.csv")
house_date <- read_csv(houseData, col_names = TRUE, col_types = NULL,
file = "/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/houseData.csv")
?saveRDS
saveRDS(houseData, row.names = FALSE,
file = "/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/houseData.rds")
saveRDS(houseData,
file = "/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/houseData.rds")
house_date <- readRDS(
file = "/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/houseData.rds")
house_date
shiny::runApp('Shiny web app')
shiny::runApp('Shiny web app')
shiny::runApp('Shiny web app')
shiny::runApp('Shiny web app')
shiny::runApp('Shiny web app')
shiny::runApp('Shiny web app')
?theme_set
shiny::runApp('Shiny web app')
table(house_date$numbeds)
type(house_date$numbeds)
typeof(house_date$numbeds)
house_date$numbeds == 2
shiny::runApp('Shiny web app')
shiny::runApp('Shiny web app')
names(house_date)
houseData$price_cat[houseData$price > 0] <- 1
houseData$price_cat[houseData$price > 100000] <- 2
houseData$price_cat[houseData$price > 200000] <- 3
houseData$price_cat[houseData$price > 300000] <- 4
houseData$price_cat <- as.factor(houseData$price_cat)
# for shiny app
saveRDS(houseData,
file = "/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/houseData.rds")
house_date <- readRDS(
file = "/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/houseData.rds")
names(house_date)
shiny::runApp('Shiny web app')
shiny::runApp('Shiny web app')
gw_in <- qmap("Greenwood IN", color = "bw", zoom = 12)
plot_data <- filter(house_date, numbeds == 2)
gw_in +
stat_bin2d(
aes(x = lon, y = lat, fill = price_cat),
size = .5, bins = 25, alpha = 1/2,
data = plot_data
) +
scale_fill_manual(
values = c("1" = "#c7e9c0","2" = "#74c476","3" = "#31a354",
"4" = "#006d2c"),
labels = c("<100,000", "100,000-200,000", "200,000-300,000", ">300,000")) +
theme(    axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.text = element_text(size=16))
shiny::runApp('Shiny web app')
shiny::runApp('Shiny web app')
shiny::runApp('Shiny web app')
shiny::runApp('Shiny web app')
shiny::runApp('Shiny web app')
figure1 <- ggplot(data=cs_out_zn_count,aes(x=count,y=cs_out_zn, fill=count)) + geom_bar() + ylab("Probalilities by count") + theme(legend.position="none")
library(pitchRx)
library(dplyr)
library(RSQLite)
library(DBI)
library(ggplot2)
db <- src_sqlite("pitchfx.sqlite3", create = T)
files <- c("inning/inning_all.xml", "players.xml")
scrape(start = "2013-06-01", end = "2013-06-01", suffix = files, connect = db$con)
# dat2 <- scrape(start = "2013-06-01", end = "2013-06-01", suffix = files)
#db <- src_sqlite("pitchfx.sqlite3")
pitch_dt <- tbl(db, "pitch")
umpire_dt <- tbl(db, "umpire")
atbat_dt <- tbl(db, "atbat")
#pitch2_dt <- dat2[["pitch"]]
#umpire_dt <- dat[["umpire"]]
atbat <- select(atbat_dt, gameday_link, num, stand, p_throws, inning, pitcher_name)
pitch_umpire <-
umpire_dt %>%
filter(position == "home") %>%
inner_join(pitch_dt, by ="gameday_link") %>%
distinct()
#outside_zone
out_zn <- pitch_umpire %>%
filter((px < -.85 | px > .85 | pz < sz_bot | pz > sz_top),
des %in% c("Called Strike", "Ball")) %>%
mutate(cs_ind = as.numeric(des == "Called Strike")) %>%
select(position, name, id.x, des, cs_ind, px, pz, sz_top, sz_bot, num, count, gameday_link) %>%
collect()
#proportion of pitches that are "called strikes" among all pitches outside the strikezone.
cs_out_zn_all <-
out_zn %>%
summarize(sum = sum(cs_ind), n = n()) %>%
collect() %>%
mutate(cs_out_zn = sum / n)
names(cs_out_zn_all) <- c("# Called Strikes","# Pitches","Called strikes %")
cs_out_zn_count <-
out_zn %>%
group_by(count) %>%
summarize(sum = sum(cs_ind), n = n()) %>%
collect() %>%
mutate(cs_out_zn = sum / n)
figure1 <- ggplot(data=cs_out_zn_count,aes(x=count,y=cs_out_zn, fill=count)) + geom_bar() + ylab("Probalilities by count") + theme(legend.position="none")
figure1
?geom_bar
figure1 <- ggplot(data=cs_out_zn_count,aes(x=count,y=cs_out_zn, fill=count)) + geom_bar(stat = "identity") + ylab("Probalilities by count") + theme(legend.position="none")
figure1
setwd("/Users/lei/Desktop/one/Practice/GIT_first/Projects/Database with R/")
knit('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Database with R/readme.rmd')
shiny::runApp('Shiny web app')
shiny::runApp('Shiny web app')
shiny::runApp('Shiny web app')
shiny::runApp('Shiny web app')
?scrape
shiny::runApp('Shiny web app')
shiny::runApp('Shiny web app')
?dateInput
shiny::runApp('Shiny web app')
shiny::runApp('Shiny web app')
shiny::runApp('~/Desktop/one/Practice/GIT_first/Projects/Web technology with R/Shiny web app')
cs_out_zn_count
row.names(cs_out_zn_count)
row.names(cs_out_zn_count) <- NULL
cs_out_zn_count
row.names(cs_out_zn_count) <- c()
cs_out_zn_count
rownames(cs_out_zn_count) <- c()
cs_out_zn_count
rownames(cs_out_zn_count)
rownames(cs_out_zn_count) <- c()
rownames(cs_out_zn_count)
rownames(cs_out_zn_count) <- 1
rownames(cs_out_zn_count) <- NULL
rownames(cs_out_zn_count)
?h3
shiny::runApp('Shiny web app')
shiny::runApp('Shiny web app')
shiny::runApp('Shiny web app')
setwd("/Users/lei/Desktop/one/Practice/GIT_first/Projects/Database with R/")
knit('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Database with R/readme.rmd')
?round
round(4.2222, 2)
shiny::runApp('Shiny web app')
?p
p('My first paragraph, with some ',
strong('bold'),
' text.')
shiny::runApp('Shiny web app')
shiny::runApp('Shiny web app')
shiny::runApp('Shiny web app')
setwd("/Users/lei/Desktop/one/Practice/GIT_first/Projects/Database with R/")
knit('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Database with R/readme.rmd')
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='huili', token='B7D36F3931099EBAC409727865EC52E0', secret='nDiD4RdJiOgHx3U/T/seBhm0xIDSAHKYzF4CktiM')
shinyapps::deployApp('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/Shiny web app')
shinyapps::deployApp('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/Shiny web app')
shinyapps::setAccountInfo(name='huili', token='B7D36F3931099EBAC409727865EC52E0', secret='nDiD4RdJiOgHx3U/T/seBhm0xIDSAHKYzF4CktiM')
shinyapps::deployApp('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/Shiny web app')
shinyapps::deployApp('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/Shiny web app'
, appName = "Web_tech")
devtools::install_github('rstudio/packrat')
shinyapps::deployApp('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/Shiny web app'
, appName = "Web_tech")
shinyapps::deployApp('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Database with R/Shiny web app'
, appName = "database")
shinyapps::deployApp('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Database with R/Shiny web app'
, appName = "database")
shiny::runApp('Shiny web app')
shiny::runApp('~/Downloads/dedce88381f447eda103785055cc8948 2')
pitch_dt
head(pitch_dt)
shiny::runApp('~/Downloads/dedce88381f447eda103785055cc8948 2')
shiny::runApp('~/Downloads/dedce88381f447eda103785055cc8948 2')
shinyapps::deployApp('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Database with R/Shiny web app'
, appName = "database")
dat2 <- scrape(start = as.character(input$pickdate), end = as.character(input$pickdate), suffix = files)
dat2 <- scrape(start = "2013-06-01", end = "2013-06-01", suffix = files)
library("xtable", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
names(dat2)
xtable(names(dat2))
as.matrix(names(dat2))
xtable(as.matrix(names(dat2)))
shinyapps::deployApp('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Database with R/Shiny web app'
, appName = "database")
shinyapps::deployApp('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Database with R/Shiny web app'
, appName = "database")
setwd("/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/")
knit('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/readme.rmd')
setwd("/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/")
knit('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Web technology with R/readme.rmd')
setwd("/Users/lei/Desktop/one/Practice/GIT_first/Projects/Visualization/")
knit('/Users/lei/Desktop/one/Practice/GIT_first/Projects/Visualization/readme.rmd')
